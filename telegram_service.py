import os
import httpx
import logging
from generate_recipe import generate_recipe
from session_store import session_store
from vision_service import download_photo, extract_ingredients_from_image
from user_service import get_user_by_telegram_id, create_user
from recipe_history_service import get_user_history
from user_preferences_service import get_preferences, update_preference
from database import get_async_session

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_API = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}'

logger = logging.getLogger(__name__)

async def send_message(chat_id, text, reply_markup=None):
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML',
        'reply_markup': reply_markup or {}
    }
    try:
        async with httpx.AsyncClient() as client:
            await client.post(f'{TELEGRAM_API}/sendMessage', json=data)
    except Exception as e:
        logger.error(f"send_message error: {e}")

WAIT_INGREDIENTS = "WAIT_INGREDIENTS"
CONFIRMING = "CONFIRMING"
ADDING = "ADDING_INGREDIENTS"
REMOVING = "REMOVING_INGREDIENTS"
IDLE = "IDLE"

CMD_CONFIRM = "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –≥–æ—Ç–æ–≤–∏–º!"
CMD_ADD = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"
CMD_REMOVE = "‚ûñ –£–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"
CMD_CANCEL = "üõë –ü–µ—Ä–µ–¥—É–º–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å"

MENU_COMMANDS = {
    "–ì–ª–∞–≤–Ω–æ–µ": "main",
    "–ü–æ–º–æ—â—å": "help",
    "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ": "saved",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏": "settings"
}

async def handle_update(update, session=None):
    message = update.get("message")
    if not message:
        return
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()
    session_data = await session_store.get_session(chat_id) or {"state": IDLE, "ingredients": []}
    state = session_data["state"]

    if text in MENU_COMMANDS:
        if text == "–ì–ª–∞–≤–Ω–æ–µ":
            await send_message(chat_id, "üë®‚Äçüç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SnapChef!\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=build_reply_keyboard(IDLE))
            session_data["state"] = WAIT_INGREDIENTS
        elif text == "–ü–æ–º–æ—â—å":
            await send_message(chat_id, "‚ùì <b>–ü–æ–º–æ—â—å</b>\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞.\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", reply_markup=build_reply_keyboard(IDLE))
        elif text == "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ":
            async for db_session in get_async_session():
                user = await get_user_by_telegram_id(db_session, str(chat_id))
                if not user:
                    await send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=build_reply_keyboard(IDLE))
                    break
                saved = await get_user_history(db_session, user.id, limit=10)
                if not saved:
                    await send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=build_reply_keyboard(IDLE))
                    break
                for rec in saved:
                    title = rec.recipe.split('\n', 1)[0][:64]
                    date = rec.created_at.strftime('%Y-%m-%d')
                    await send_message(chat_id, f"<b>{title}</b>\n–î–∞—Ç–∞: {date}", reply_markup=build_reply_keyboard(IDLE))
        elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            async for db_session in get_async_session():
                user = await get_user_by_telegram_id(db_session, str(chat_id))
                if not user:
                    await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_reply_keyboard(IDLE))
                    break
                prefs = await get_preferences(db_session, user.id)
                diff = getattr(prefs, 'difficulty', None) or '–õ—é–±–∞—è'
                calories = getattr(prefs, 'calories_enabled', False)
                healthy = getattr(prefs, 'healthy_mode', False)
                msg = (
                    f'‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n'
                    f'–°–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{diff}</b>\n'
                    f'–ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π: <b>{"–≤–∫–ª—é—á—ë–Ω" if calories else "–≤—ã–∫–ª—é—á—ë–Ω"}</b>\n'
                    f'–ó–û–ñ‚Äë—Ä–µ–∂–∏–º: <b>{"–≤–∫–ª—é—á—ë–Ω" if healthy else "–≤—ã–∫–ª—é—á—ë–Ω"}</b>'
                )
                await send_message(chat_id, msg, reply_markup=build_reply_keyboard(IDLE))
        await session_store.set_session(chat_id, session_data)
        return

    if state == WAIT_INGREDIENTS:
        if text in MENU_COMMANDS:
            return
        if text and text not in MENU_COMMANDS:
            new_ings = await extract_ingredients(message)
            if new_ings:
                session_data["ingredients"].extend(new_ings)
                session_data["state"] = CONFIRMING
                await send_confirmation(chat_id, session_data["ingredients"])
                await session_store.set_session(chat_id, session_data)
            else:
                await send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_reply_keyboard(WAIT_INGREDIENTS))
        return

    if state == CONFIRMING:
        if text == CMD_CONFIRM:
            recipe_text = await generate_recipe(
                session_data["ingredients"],
                user_id=chat_id,
                session=session
            )
            await send_message(chat_id, recipe_text)
            session_data["ingredients"] = []
            session_data["state"] = IDLE
            await session_store.set_session(chat_id, session_data)
            return
        if text == CMD_ADD:
            session_data["state"] = ADDING
            await send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", reply_markup=build_reply_keyboard(ADDING))
            await session_store.set_session(chat_id, session_data)
            return
        if text == CMD_REMOVE:
            session_data["state"] = REMOVING
            await send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç —É–±—Ä–∞—Ç—å", reply_markup=build_reply_keyboard(REMOVING))
            await session_store.set_session(chat_id, session_data)
            return
        if text == CMD_CANCEL:
            session_data["ingredients"] = []
            session_data["state"] = IDLE
            await send_message(chat_id, "–ü–æ–Ω—è–ª –≤–∞—Å! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≥–æ—Ç–æ–≤–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª", reply_markup=build_reply_keyboard(IDLE))
            await session_store.set_session(chat_id, session_data)
            return
        return

    if state == ADDING:
        if text in MENU_COMMANDS:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –¥–∞–∂–µ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if text == "–ì–ª–∞–≤–Ω–æ–µ":
                await send_message(chat_id, "üë®‚Äçüç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SnapChef!\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=build_reply_keyboard(IDLE))
                session_data["state"] = WAIT_INGREDIENTS
            elif text == "–ü–æ–º–æ—â—å":
                await send_message(chat_id, "‚ùì <b>–ü–æ–º–æ—â—å</b>\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞.\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", reply_markup=build_reply_keyboard(IDLE))
            elif text == "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ":
                await send_message(chat_id, "üíæ –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.", reply_markup=build_reply_keyboard(IDLE))
            elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await send_message(chat_id, "‚öôÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=build_reply_keyboard(IDLE))
            await session_store.set_session(chat_id, session_data)
            return
        new_ings = await extract_ingredients(message)
        session_data["ingredients"].extend(new_ings)
        session_data["state"] = CONFIRMING
        await send_confirmation(chat_id, session_data["ingredients"])
        await session_store.set_session(chat_id, session_data)
        return

    if state == REMOVING:
        if text in MENU_COMMANDS:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –¥–∞–∂–µ –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if text == "–ì–ª–∞–≤–Ω–æ–µ":
                await send_message(chat_id, "üë®‚Äçüç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SnapChef!\n–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=build_reply_keyboard(IDLE))
                session_data["state"] = WAIT_INGREDIENTS
            elif text == "–ü–æ–º–æ—â—å":
                await send_message(chat_id, "‚ùì <b>–ü–æ–º–æ—â—å</b>\n1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞.\n3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.", reply_markup=build_reply_keyboard(IDLE))
            elif text == "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ":
                await send_message(chat_id, "üíæ –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã.", reply_markup=build_reply_keyboard(IDLE))
            elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
                await send_message(chat_id, "‚öôÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=build_reply_keyboard(IDLE))
            await session_store.set_session(chat_id, session_data)
            return
        ing_to_remove = text.strip().lower()
        if ing_to_remove in [i.lower() for i in session_data["ingredients"]]:
            session_data["ingredients"] = [i for i in session_data["ingredients"] if i.lower() != ing_to_remove]
        else:
            await send_message(chat_id, f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ ¬´{ing_to_remove}¬ª –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")
        session_data["state"] = CONFIRMING
        await send_confirmation(chat_id, session_data["ingredients"])
        await session_store.set_session(chat_id, session_data)
        return

    if state == IDLE:
        await send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞.", reply_markup=build_reply_keyboard(IDLE))
        session_data["state"] = WAIT_INGREDIENTS
        await session_store.set_session(chat_id, session_data)
        return

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    if text == "–°–ª–æ–∂–Ω–æ—Å—Ç—å":
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_reply_keyboard(IDLE))
                break
            prefs = await get_preferences(db_session, user.id)
            diff = getattr(prefs, 'difficulty', None) or '–õ—é–±–∞—è'
            msg = f"–¢–µ–∫—É—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: <b>{diff}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é: '–õ—é–±–∞—è', '–ü—Ä–æ—Å—Ç—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–°–ª–æ–∂–Ω—ã–µ'"
            await send_message(chat_id, msg, reply_markup={
                'keyboard': [[{'text': d}] for d in ['–õ—é–±–∞—è', '–ü—Ä–æ—Å—Ç—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–°–ª–æ–∂–Ω—ã–µ']] + [[{'text': '–ù–∞–∑–∞–¥'}]],
                'resize_keyboard': True
            })
        return
    if text in ['–õ—é–±–∞—è', '–ü—Ä–æ—Å—Ç—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–°–ª–æ–∂–Ω—ã–µ']:
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_reply_keyboard(IDLE))
                break
            await update_preference(db_session, user.id, 'difficulty', text)
            await send_message(chat_id, f"–°–ª–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{text}</b>", reply_markup=build_reply_keyboard(IDLE))
        return
    if text == "–ó–û–ñ":
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_reply_keyboard(IDLE))
                break
            prefs = await get_preferences(db_session, user.id)
            new_val = not prefs.healthy_mode
            await update_preference(db_session, user.id, 'healthy_mode', new_val)
            msg = f"–ó–û–ñ‚Äë—Ä–µ–∂–∏–º {'–≤–∫–ª—é—á—ë–Ω' if new_val else '–≤—ã–∫–ª—é—á—ë–Ω'}."
            await send_message(chat_id, msg, reply_markup=build_reply_keyboard(IDLE))
        return
    if text == "–ö–∞–ª–æ—Ä–∏–∏":
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_reply_keyboard(IDLE))
                break
            prefs = await get_preferences(db_session, user.id)
            new_val = not prefs.calories_enabled
            await update_preference(db_session, user.id, 'calories_enabled', new_val)
            msg = f"–ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π {'–≤–∫–ª—é—á—ë–Ω' if new_val else '–≤—ã–∫–ª—é—á—ë–Ω'}."
            await send_message(chat_id, msg, reply_markup=build_reply_keyboard(IDLE))
        return
    if text == "–ù–∞–∑–∞–¥":
        await send_message(chat_id, "‚öôÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.", reply_markup=build_reply_keyboard(IDLE))
        return

async def extract_ingredients(message):
    if message.get("photo"):
        photo_sizes = message["photo"]
        file_id = photo_sizes[-1]["file_id"]
        token = TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{token}/getFile"
        async with httpx.AsyncClient() as client:
            resp = await client.get(url, params={"file_id": file_id})
            file_path = resp.json()["result"]["file_path"]
        photo_bytes = await download_photo(file_path, token)
        return await extract_ingredients_from_image(photo_bytes)
    elif message.get("text"):
        text = message["text"].strip()
        if text in MENU_COMMANDS:
            return []
        return [i.strip() for i in text.split(",") if i.strip()]
    return []

async def send_confirmation(chat_id, ingredients):
    text = "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(f"‚Äì {i}" for i in ingredients) + "\n–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await send_message(chat_id, text, reply_markup=build_reply_keyboard(CONFIRMING))

def build_reply_keyboard(state):
    if state == CONFIRMING:
        return {
            'keyboard': [
                [{'text': '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –≥–æ—Ç–æ–≤–∏–º!'}],
                [{'text': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'}, {'text': '‚ûñ –£–±—Ä–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç'}],
                [{'text': 'üõë –ü–µ—Ä–µ–¥—É–º–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å'}]
            ],
            'resize_keyboard': True
        }
    if state == IDLE:
        return {
            'keyboard': [
                [{'text': '–ì–ª–∞–≤–Ω–æ–µ'}],
                [{'text': '–ü–æ–º–æ—â—å'}, {'text': '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ'}],
                [{'text': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                [{'text': '–°–ª–æ–∂–Ω–æ—Å—Ç—å'}, {'text': '–ó–û–ñ'}, {'text': '–ö–∞–ª–æ—Ä–∏–∏'}]
            ],
            'resize_keyboard': True
        }
    if state in (ADDING, REMOVING):
        return {'keyboard': [[{'text': '–ù–∞–∑–∞–¥'}]], 'resize_keyboard': True}
    return {'keyboard': [], 'resize_keyboard': True} 