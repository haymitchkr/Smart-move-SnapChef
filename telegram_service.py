# telegram_service.py (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
import os
import logging
import httpx
from session_store import session_store
from vision_service import download_photo, extract_ingredients_from_image
from generate_recipe import generate_recipe
from database import get_async_session
from user_service import get_user_by_telegram_id
from user_preferences_service import get_preferences, update_preference
from recipe_history_service import save_user_recipe, get_user_history
from config.texts import BUTTONS, WELCOME_TEXT, HELP_TEXT, SETTING_STATUS_TEMPLATE, HEALTHY_ON_TEXT, HEALTHY_OFF_TEXT, CUISINE_OPTIONS, CUISINE_SET_TEXT
import json

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_API = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
logger = logging.getLogger(__name__)

STATES = {
    'MAIN': 'MAIN',
    'WAIT': 'WAIT_INGREDIENTS',
    'CONFIRM': 'CONFIRMING',
    'ADD': 'ADDING',
    'REMOVE': 'REMOVING',
    'SETTINGS': 'SETTINGS',
    'AFTER_RECIPE': 'AFTER_RECIPE'
}

MENU = {
    'MAIN': [[BUTTONS['start']], [BUTTONS['settings'], BUTTONS['saved']], [BUTTONS['help']]],
    'SETTINGS': [[BUTTONS['back']]],
    'WAIT_INGREDIENTS': [[BUTTONS['back']]],
    'CONFIRMING': [
        [BUTTONS['confirm']],
        [BUTTONS['add'], BUTTONS['remove']],
        [BUTTONS['cancel']]
    ],
    'AFTER_RECIPE': [
        [BUTTONS['confirm']],
        [BUTTONS['add'], BUTTONS['remove']],
        [BUTTONS['cancel']]
    ]
}

def build_keyboard(state):
    if state == "AFTER_RECIPE":
        return {
            "keyboard": [
                [{"text": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç"}],
                [{"text": "üîÑ –î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç"}],
                [{"text": "‚¨áÔ∏è –ü—Ä–æ—â–µ"}, {"text": "‚¨ÜÔ∏è –°–ª–æ–∂–Ω–µ–µ"}],
                [{"text": "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É"}]
            ],
            "resize_keyboard": True
        }
    return {"keyboard": [[{"text": btn} for btn in row] for row in MENU.get(state, [])], "resize_keyboard": True}

async def send_message(chat_id, text, reply_markup=None):
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "HTML"}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    async with httpx.AsyncClient() as client:
        await client.post(f"{TELEGRAM_API}/sendMessage", json=payload)

# --- FSM –ø–µ—Ä–µ—Ö–æ–¥ ---
async def to_state(chat_id, new_state, message_text, session_data=None):
    """–ü–µ—Ä–µ—Ö–æ–¥ FSM –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º."""
    if session_data is None:
        session_data = await session_store.get_session(chat_id) or {"state": "MAIN", "ingredients": []}
    logger.info(f"[FSM] {chat_id} –ø–µ—Ä–µ—Ö–æ–¥: {session_data['state']} -> {new_state}")
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session_data["state"] = new_state
    await send_message(chat_id, message_text, reply_markup=build_keyboard(new_state))
    await session_store.set_session(chat_id, session_data)

# --- FSM handle_update ---
async def handle_update(update, session=None):
    logger.info(f"handle_update called: {update}")
    message = update.get("message")
    if not message or (not message.get("text") and not message.get("photo")):
        if message and "chat" in message:
            await send_message(message["chat"]["id"], "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∏–∂–µ.")
        return
    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()
    session_data = await session_store.get_session(chat_id) or {"state": "MAIN", "ingredients": []}
    state = session_data["state"]

    # FSM: –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    FSM_COMMANDS = {
        "MAIN": ["/start", BUTTONS["start"], BUTTONS["settings"], BUTTONS["saved"], BUTTONS["help"]],
        "SETTINGS": ["–°–ª–æ–∂–Ω–æ—Å—Ç—å", "üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "–õ—é–±–∞—è", "–ü—Ä–æ—Å—Ç—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–æ–∂–Ω—ã–µ"],
        "WAIT_INGREDIENTS": ["üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"],
        "CONFIRMING": [BUTTONS["confirm"], BUTTONS["add"], BUTTONS["remove"], BUTTONS["cancel"]],
        "AFTER_RECIPE": ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", "üîÑ –î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç", "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É"],
        "ADD": [],
        "REMOVE": [],
    }

    # MAIN
    if state == "MAIN":
        if text not in FSM_COMMANDS["MAIN"]:
            return
        if text == "/start":
            await to_state(chat_id, "MAIN", WELCOME_TEXT, session_data)
            return
        if text == "üç≥ –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∫—É":
            await to_state(chat_id, "WAIT_INGREDIENTS", "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏.", session_data)
            return
        if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await to_state(chat_id, "SETTINGS", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", session_data)
            async for db_session in get_async_session():
                user = await get_user_by_telegram_id(db_session, str(chat_id))
                if user:
                    await send_settings(chat_id, db_session, user.id)
                break
            return
        if text == "üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ":
            async for db_session in get_async_session():
                user = await get_user_by_telegram_id(db_session, str(chat_id))
                if not user:
                    await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_keyboard("MAIN"))
                    break
                recipes = await get_user_history(db_session, user.id, limit=10)
                if not recipes:
                    await send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=build_keyboard("MAIN"))
                    break
                msg = "<b>–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:</b>\n\n"
                keyboard = {"inline_keyboard": []}
                for r in recipes:
                    title = r.recipe.split("\n")[0][:40]  # –ø–µ—Ä–≤—ã–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                    date = r.created_at.strftime("%d.%m.%Y") if hasattr(r, 'created_at') else ""
                    btn_text = f"{title} ({date})"
                    keyboard["inline_keyboard"].append([
                        {"text": btn_text, "callback_data": f"show_recipe_{r.id}"}
                    ])
                await send_message(chat_id, msg, reply_markup=keyboard)
            return
        if text == "‚ùì –ü–æ–º–æ—â—å":
            await send_message(chat_id, HELP_TEXT, reply_markup=build_keyboard("MAIN"))
            return

    # SETTINGS
    if state == "SETTINGS":
        if text in ["–õ—é–±–∞—è", "–ü—Ä–æ—Å—Ç—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–æ–∂–Ω—ã–µ"]:
            async for db_session in get_async_session():
                user = await get_user_by_telegram_id(db_session, str(chat_id))
                if not user:
                    await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=build_keyboard("SETTINGS"))
                    break
                await update_preference(db_session, user.id, 'difficulty', text)
                logger.info(f"[FSM] {chat_id} –≤—ã–±—Ä–∞–ª —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {text}")
                await send_settings(chat_id, db_session, user.id)
            return
        if text not in FSM_COMMANDS["SETTINGS"]:
            if message.get("photo"):
                await send_message(chat_id, "–°–µ–π—á–∞—Å –≤—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=build_keyboard("SETTINGS"))
            return
        if text == "–°–ª–æ–∂–Ω–æ—Å—Ç—å":
            await send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", reply_markup={
                'keyboard': [[{'text': d}] for d in ['–õ—é–±–∞—è', '–ü—Ä–æ—Å—Ç—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–°–ª–æ–∂–Ω—ã–µ']] + [[{'text': 'üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'}]],
                'resize_keyboard': True
            })
            return
        if text == "üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
            await to_state(chat_id, "MAIN", "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", session_data)
            return

    # WAIT_INGREDIENTS
    if state == "WAIT_INGREDIENTS":
        if text in FSM_COMMANDS["WAIT_INGREDIENTS"]:
            if text == "üîÅ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                await to_state(chat_id, "MAIN", "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", session_data)
            return
        # –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        if message.get("photo") or (text and text not in BUTTONS.values()):
            if message.get("photo"):
                await send_message(chat_id, "üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–µ–π—á–∞—Å –≥–ª—è–Ω—É‚Ä¶")
            new_ings = await extract_ingredients(message)
            if new_ings:
                session_data["ingredients"].extend(new_ings)
                await to_state(chat_id, "CONFIRMING", "–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + "\n".join(f"‚Äì {i}" for i in session_data["ingredients"]) + "\n–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", session_data)
            else:
                await send_message(chat_id, "‚ùå –•–º–º, –Ω–µ –≤–∏–∂—É —Å—ä–µ–¥–æ–±–Ω–æ–≥–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.", reply_markup=build_keyboard("WAIT_INGREDIENTS"))
            return
        # –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    # ADD
    if state == "ADD":
        if text and text not in BUTTONS.values():
            session_data["ingredients"].append(text)
            await to_state(chat_id, "CONFIRMING", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω.\n" + "\n".join(f"‚Äì {i}" for i in session_data["ingredients"]) + "\n–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", session_data)
        return

    # REMOVE
    if state == "REMOVE":
        if text and text not in BUTTONS.values():
            ing_lower = text.lower()
            found = False
            for i in session_data["ingredients"]:
                if i.lower() == ing_lower:
                    session_data["ingredients"].remove(i)
                    found = True
                    break
            if found:
                await to_state(chat_id, "CONFIRMING", f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{text}' —É–¥–∞–ª—ë–Ω.\n" + "\n".join(f"‚Äì {i}" for i in session_data["ingredients"]) + "\n–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", session_data)
            else:
                await to_state(chat_id, "CONFIRMING", f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.\n" + "\n".join(f"‚Äì {i}" for i in session_data["ingredients"]) + "\n–í—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", session_data)
        return

    # CONFIRMING
    if state == "CONFIRMING":
        if text not in FSM_COMMANDS["CONFIRMING"]:
            await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã. üëá", reply_markup=build_keyboard("CONFIRMING"))
            return
        if text == BUTTONS["add"]:
            session_data["state"] = "ADD"
            logger.info(f"[FSM] {chat_id} -> ADD (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞)")
            await send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è‚Ä¶", reply_markup=build_keyboard("ADD"))
            await session_store.set_session(chat_id, session_data)
            return
        if text == BUTTONS["remove"]:
            session_data["state"] = "REMOVE"
            logger.info(f"[FSM] {chat_id} -> REMOVE (—É–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞)")
            await send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚Ä¶", reply_markup=build_keyboard("REMOVE"))
            await session_store.set_session(chat_id, session_data)
            return
        if text == "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ, –≥–æ—Ç–æ–≤–∏–º!":
            await send_message(chat_id, "üë®‚Äçüç≥ –î—É–º–∞—é‚Ä¶ –°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞–µ–º —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ!")
            try:
                recipe_text = await generate_recipe(
                    session_data["ingredients"],
                    user_id=chat_id,
                    session=session
                )
                session_data["last_recipe"] = recipe_text
                await send_message(chat_id, recipe_text, reply_markup=build_keyboard("AFTER_RECIPE"))
                await to_state(chat_id, "AFTER_RECIPE", "–ß—Ç–æ –¥–∞–ª—å—à–µ? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", session_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
                await send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_keyboard("CONFIRMING"))
            return
        if text == "üõë –ü–µ—Ä–µ–¥—É–º–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å":
            session_data["ingredients"] = []
            await to_state(chat_id, "MAIN", "–ì–æ—Ç–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", session_data)
            return

    # AFTER_RECIPE
    if state == "AFTER_RECIPE":
        if text not in FSM_COMMANDS["AFTER_RECIPE"] + ["‚¨áÔ∏è –ü—Ä–æ—â–µ", "‚¨ÜÔ∏è –°–ª–æ–∂–Ω–µ–µ"]:
            await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã. üëá", reply_markup=build_keyboard("AFTER_RECIPE"))
            return
        if text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç":
            try:
                await save_recipe(chat_id, session_data.get("ingredients", []), session_data.get("last_recipe", ""))
                await send_message(chat_id, "‚úÖ –†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ.", reply_markup=build_keyboard("AFTER_RECIPE"))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
                await send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_keyboard("AFTER_RECIPE"))
            return
        if text == "üîÑ –î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç":
            await send_message(chat_id, "üë®‚Äçüç≥ –î—É–º–∞—é‚Ä¶ –°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞–µ–º —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ!")
            try:
                recipe_text = await generate_recipe(
                    session_data["ingredients"],
                    user_id=chat_id,
                    session=session
                )
                session_data["last_recipe"] = recipe_text
                await send_message(chat_id, recipe_text, reply_markup=build_keyboard("AFTER_RECIPE"))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
                await send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_keyboard("AFTER_RECIPE"))
            return
        if text in ["‚¨áÔ∏è –ü—Ä–æ—â–µ", "‚¨ÜÔ∏è –°–ª–æ–∂–Ω–µ–µ"]:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç temp_difficulty, –∑–∞—Ç–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è)
            DIFFICULTY_ORDER = ["–ü—Ä–æ—Å—Ç—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–æ–∂–Ω—ã–µ"]
            async for db_session in get_async_session():
                user = await get_user_by_telegram_id(db_session, str(chat_id))
                prefs = await get_preferences(db_session, user.id) if user else None
                current = session_data.get("temp_difficulty")
                if not current:
                    current = getattr(prefs, "difficulty", "–°—Ä–µ–¥–Ω–∏–µ")
                    if current not in DIFFICULTY_ORDER:
                        current = "–°—Ä–µ–¥–Ω–∏–µ"
                idx = DIFFICULTY_ORDER.index(current)
                if text == "‚¨áÔ∏è –ü—Ä–æ—â–µ" and idx > 0:
                    new_difficulty = DIFFICULTY_ORDER[idx - 1]
                elif text == "‚¨ÜÔ∏è –°–ª–æ–∂–Ω–µ–µ" and idx < len(DIFFICULTY_ORDER) - 1:
                    new_difficulty = DIFFICULTY_ORDER[idx + 1]
                else:
                    new_difficulty = current
                session_data["temp_difficulty"] = new_difficulty
                await send_message(chat_id, f"üë®‚Äçüç≥ –î—É–º–∞—é‚Ä¶ –°–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞–µ–º —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–µ! (–°–ª–æ–∂–Ω–æ—Å—Ç—å: {new_difficulty})")
                try:
                    recipe_text = await generate_recipe(
                        session_data["ingredients"],
                        user_id=chat_id,
                        session=session,
                        temp_difficulty=new_difficulty
                    )
                    session_data["last_recipe"] = recipe_text
                    await send_message(chat_id, recipe_text, reply_markup=build_keyboard("AFTER_RECIPE"))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
                    await send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=build_keyboard("AFTER_RECIPE"))
                break
            return
        if text == "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ—Ç–æ–≤–∫—É":
            session_data["ingredients"] = []
            await to_state(chat_id, "MAIN", "–ì–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", session_data)
            return

    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≤ MAIN
    if state not in FSM_COMMANDS:
        await to_state(chat_id, "MAIN", "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", session_data)
        return

    # –í –∫–∞–∂–¥–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º—É—Å–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    if state in FSM_COMMANDS and text not in FSM_COMMANDS[state]:
        await send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã. üëá", reply_markup=build_keyboard(state))
        return

async def extract_ingredients(msg):
    if msg.get("photo"):
        file_id = msg["photo"][-1]["file_id"]
        async with httpx.AsyncClient() as client:
            r = await client.get(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile", params={"file_id": file_id})
            path = r.json()["result"]["file_path"]
        photo = await download_photo(path, TELEGRAM_BOT_TOKEN)
        return await extract_ingredients_from_image(photo)
    if msg.get("text"):
        return [i.strip() for i in msg["text"].split(",") if i.strip()]
    return []

def build_settings_inline_keyboard(healthy_profile, cuisine, difficulty):
    return {
        "inline_keyboard": [
            [
                {
                    "text": f"ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: {'‚úÖ' if healthy_profile else '‚ùå'}",
                    "callback_data": "toggle_healthy_profile"
                }
            ],
            [
                {
                    "text": f"üç± –ö—É—Ö–Ω—è: {cuisine}",
                    "callback_data": "choose_cuisine"
                }
            ],
            [
                {
                    "text": f"üéöÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}",
                    "callback_data": "choose_difficulty"
                }
            ]
        ]
    }

async def send_settings(chat_id, db_session, user_id, message_id=None):
    CUISINE_OPTIONS = ["–õ—é–±–∞—è", "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–ê–∑–∏–∞—Ç—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–í–æ—Å—Ç–æ—á–Ω–∞—è", "–ò–Ω–¥–∏–π—Å–∫–∞—è"]
    DIFFICULTY_OPTIONS = ["–õ—é–±–∞—è", "–ü—Ä–æ—Å—Ç—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–æ–∂–Ω—ã–µ"]
    prefs = await get_preferences(db_session, user_id)
    healthy_profile = getattr(prefs, 'healthy_profile', False)
    cuisine = getattr(prefs, 'preferred_cuisine', '–õ—é–±–∞—è')
    difficulty = getattr(prefs, 'difficulty', '–õ—é–±–∞—è')
    if cuisine not in CUISINE_OPTIONS:
        cuisine = "–õ—é–±–∞—è"
    if difficulty not in DIFFICULTY_OPTIONS:
        difficulty = "–õ—é–±–∞—è"
    healthy_text = '–í–∫–ª' if healthy_profile else '–í—ã–∫–ª'
    msg = f"<b>ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ:</b> {healthy_text}\n<b>üç± –ö—É—Ö–Ω—è:</b> {cuisine}\n<b>üéöÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {difficulty}"
    keyboard = build_settings_inline_keyboard(healthy_profile, cuisine, difficulty)
    if message_id:
        await edit_message_text(chat_id, message_id, msg, keyboard)
    else:
        await send_message(chat_id, msg, reply_markup=keyboard)

async def edit_message_text(chat_id, message_id, text, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "message_id": message_id,
        "text": text,
        "parse_mode": "HTML"
    }
    if reply_markup:
        payload["reply_markup"] = reply_markup
    async with httpx.AsyncClient() as client:
        await client.post(f"{TELEGRAM_API}/editMessageText", json=payload)

async def save_recipe(chat_id, ingredients, recipe_text):
    async for db_session in get_async_session():
        user = await get_user_by_telegram_id(db_session, str(chat_id))
        if not user:
            return
        await save_user_recipe(db_session, user.id, recipe_text, ingredients)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
async def handle_callback_query(callback_query, session=None):
    chat_id = callback_query["message"]["chat"]["id"]
    message_id = callback_query["message"]["message_id"]
    data = callback_query["data"]
    if data.startswith("show_recipe_"):
        recipe_id = int(data.replace("show_recipe_", ""))
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                break
            from sqlalchemy.future import select
            from models import RecipeHistory
            result = await db_session.execute(select(RecipeHistory).where(RecipeHistory.id == recipe_id, RecipeHistory.user_id == user.id))
            recipe = result.scalars().first()
            if not recipe:
                await send_message(chat_id, "–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                break
            await send_message(chat_id, f"<b>–ü–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:</b>\n\n{recipe.recipe}")
        return
    if data == "toggle_healthy_profile":
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await edit_message_text(chat_id, message_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                break
            prefs = await get_preferences(db_session, user.id)
            new_val = not getattr(prefs, 'healthy_profile', False)
            await update_preference(db_session, user.id, 'healthy_profile', new_val)
            logger.info(f"[SETTINGS] {chat_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: {new_val}")
            text = "–†–µ–∂–∏–º –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –≤–∫–ª—é—á—ë–Ω." if new_val else "–†–µ–∂–∏–º –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω."
            await edit_message_text(chat_id, message_id, text)
            await send_settings(chat_id, db_session, user.id)
        return
    if data == "choose_cuisine":
        CUISINE_OPTIONS = ["–õ—é–±–∞—è", "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–ê–∑–∏–∞—Ç—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–í–æ—Å—Ç–æ—á–Ω–∞—è", "–ò–Ω–¥–∏–π—Å–∫–∞—è"]
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": c, "callback_data": f"set_cuisine_{c}"} for c in CUISINE_OPTIONS
                ]
            ]
        }
        await edit_message_text(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ö–Ω—é:", keyboard)
        return
    if data.startswith("set_cuisine_"):
        cuisine = data.replace("set_cuisine_", "")
        CUISINE_OPTIONS = ["–õ—é–±–∞—è", "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è", "–ê–∑–∏–∞—Ç—Å–∫–∞—è", "–ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è", "–í–æ—Å—Ç–æ—á–Ω–∞—è", "–ò–Ω–¥–∏–π—Å–∫–∞—è"]
        if cuisine not in CUISINE_OPTIONS:
            cuisine = "–õ—é–±–∞—è"
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await edit_message_text(chat_id, message_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                break
            await update_preference(db_session, user.id, 'preferred_cuisine', cuisine)
            logger.info(f"[SETTINGS] {chat_id} –≤—ã–±—Ä–∞–ª –∫—É—Ö–Ω—é: {cuisine}")
            text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ö–Ω—é: {cuisine}."
            await edit_message_text(chat_id, message_id, text)
            await send_settings(chat_id, db_session, user.id)
        return
    if data == "settings_back":
        await edit_message_text(chat_id, message_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return
    if data == "choose_difficulty":
        DIFFICULTY_OPTIONS = ["–õ—é–±–∞—è", "–ü—Ä–æ—Å—Ç—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–æ–∂–Ω—ã–µ"]
        keyboard = {
            "inline_keyboard": [
                [
                    {"text": d, "callback_data": f"set_difficulty_{d}"} for d in DIFFICULTY_OPTIONS
                ]
            ]
        }
        await edit_message_text(chat_id, message_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:", keyboard)
        return
    if data.startswith("set_difficulty_"):
        difficulty = data.replace("set_difficulty_", "")
        DIFFICULTY_OPTIONS = ["–õ—é–±–∞—è", "–ü—Ä–æ—Å—Ç—ã–µ", "–°—Ä–µ–¥–Ω–∏–µ", "–°–ª–æ–∂–Ω—ã–µ"]
        if difficulty not in DIFFICULTY_OPTIONS:
            difficulty = "–õ—é–±–∞—è"
        async for db_session in get_async_session():
            user = await get_user_by_telegram_id(db_session, str(chat_id))
            if not user:
                await edit_message_text(chat_id, message_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                break
            await update_preference(db_session, user.id, 'difficulty', difficulty)
            logger.info(f"[SETTINGS] {chat_id} –≤—ã–±—Ä–∞–ª —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}")
            text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty}."
            await edit_message_text(chat_id, message_id, text)
            await send_settings(chat_id, db_session, user.id)
        return
