RECIPE_GENERATION_PROMPT = (
    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SnapChef. –°–æ—Å—Ç–∞–≤–ª—è–π —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º, –ø–æ–Ω—è—Ç–Ω–æ–º –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ.\n\n"
    "–û—Ñ–æ—Ä–º–ª—è–π –∫–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\n\n"
    "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ ‚Äî –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.\n"
    "2. –°–ª–æ–∂–Ω–æ—Å—Ç—å ‚Äî –æ—Ü–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç –∫–∞–∫ '–õ–µ–≥–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π' –∏–ª–∏ '–°–ª–æ–∂–Ω—ã–π'.\n\n"
    "3. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "   - –ø—Ä–æ–¥—É–∫—Ç 1\n"
    "   - –ø—Ä–æ–¥—É–∫—Ç 2\n"
    "   –∏ —Ç.–¥. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏—Ä–µ (‚Äì), –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ä—ã (*, ‚Ä¢ –∏ —Ç.–ø.).\n\n"
    "4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –æ–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ –Ω–∞—á–∞–ª–∞ –≥–æ—Ç–æ–≤–∫–∏ (–ø–æ–º—ã—Ç—å, –ø–æ—á–∏—Å—Ç–∏—Ç—å, –Ω–∞—Ä–µ–∑–∞—Ç—å –∏ —Ç.–¥.). –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
    "5. –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. –ö–∞–∂–¥—ã–π —à–∞–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.\n"
    "6. –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî 1‚Äì3 –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–∫—É—Å–∞, –∑–∞–º–µ–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥–∞—á–µ –±–ª—é–¥–∞ –∏ —Ç.–¥.\n\n"
    "–°—Ç–∏–ª—å —Ä–µ—á–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä.\n"
    "–°–º–∞–π–ª–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –º–µ—Ä—É –∏ –ø–æ –¥–µ–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, üçã, üç≥, üçΩÔ∏è). –ù–µ –±–æ–ª–µ–µ 2‚Äì3 –≤ —Ç–µ–∫—Å—Ç–µ, —Å—Ç–∞–≤—å –∏—Ö —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω–æ.\n\n"
    "–°–¢–†–û–ì–û –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (*, **, __, -, ‚Ä¢, # –∏ –ø—Ä–æ—á–µ–µ).\n"
    "–ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Ä–µ—Ü–µ–ø—Ç–∞."
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, –∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–ø–µ—Ü–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ, –Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"
)

import os


import logging
import google.generativeai as genai
from dotenv import load_dotenv
import re
from user_preferences_service import get_preferences
from typing import Optional, List
from sqlalchemy.ext.asyncio import AsyncSession

load_dotenv()

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
genai.configure(api_key=GEMINI_API_KEY)

logger = logging.getLogger(__name__)

def format_recipe(text: str) -> str:
    # –£–¥–∞–ª—è–µ–º markdown –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)
    text = text.replace('**', '').replace('*', '')
    text = text.replace('‚Ä¢', '-')
    text = text.replace('‚Äî', '-')
    text = text.replace('__', '')

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ –æ—Ç emoji –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    def clean_line(line, block_emoji, block_title):
        # –£–¥–∞–ª—è–µ–º emoji –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
        pattern = rf'^{re.escape(block_emoji)}\s*{re.escape(block_title)}:?\s*'
        return re.sub(pattern, '', line, flags=re.IGNORECASE).strip()

    # –ü–∞—Ä—Å–∏–º –±–ª–æ–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    blocks = {
        'title': '',
        'difficulty': '',
        'ingredients': '',
        'prep': '',
        'steps': '',
        'tips': '',
        'kbju': ''
    }
    lines = [l.strip() for l in text.strip().split('\n') if l.strip()]
    # 1. –ù–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    if lines:
        blocks['title'] = re.sub(r'^üìå\s*', '', lines[0]).strip()
    # 2. –°–ª–æ–∂–Ω–æ—Å—Ç—å
    diff_match = next((l for l in lines if re.match(r'(?i)^–°–ª–æ–∂–Ω–æ—Å—Ç—å[:\s]', l)), None)
    if diff_match:
        blocks['difficulty'] = re.sub(r'(?i)^–°–ª–æ–∂–Ω–æ—Å—Ç—å[:\s]*', '', diff_match).strip()
    if not blocks['difficulty']:
        blocks['difficulty'] = '–°—Ä–µ–¥–Ω–∏–π'
    # 3. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    ing_start = next((i for i, l in enumerate(lines) if re.search(r'(?i)–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã', l)), None)
    prep_start = next((i for i, l in enumerate(lines) if re.search(r'(?i)–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', l)), None)
    steps_start = next((i for i, l in enumerate(lines) if re.search(r'(?i)—à–∞–≥–∏|–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', l)), None)
    tips_start = next((i for i, l in enumerate(lines) if re.search(r'(?i)—Å–æ–≤–µ—Ç—ã', l)), None)
    kbju_start = next((i for i, l in enumerate(lines) if re.search(r'(?i)–∫–±–∂—É', l)), None)

    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    if ing_start is not None:
        end = prep_start or steps_start or tips_start or kbju_start or len(lines)
        block_lines = lines[ing_start+1:end]
        # –û—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç emoji/–∑–∞–≥–æ–ª–æ–≤–∫–∞
        block_lines = [clean_line(l, 'üìù', '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã') for l in block_lines if l]
        ings = [re.sub(r'^[-‚Äì\d.\s]*', '', i) for i in block_lines]
        blocks['ingredients'] = '\n'.join(f'‚Äì {i}' for i in ings if i)
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    if prep_start is not None:
        end = steps_start or tips_start or kbju_start or len(lines)
        block_lines = lines[prep_start+1:end]
        block_lines = [clean_line(l, 'üî™', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤') for l in block_lines if l]
        preps = [re.sub(r'^[-‚Äì\d.\s]*', '', i) for i in block_lines]
        blocks['prep'] = '\n'.join(f'‚Äì {i}' for i in preps if i)
    # –®–∞–≥–∏
    if steps_start is not None:
        end = tips_start or kbju_start or len(lines)
        block_lines = lines[steps_start+1:end]
        block_lines = [clean_line(l, 'ü•£', '–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è') for l in block_lines if l]
        steps = [re.sub(r'^[-‚Äì\d.\s]*', '', s) for s in block_lines]
        blocks['steps'] = '\n'.join(f'{idx+1}. {s}' for idx, s in enumerate(steps) if s)
    # –°–æ–≤–µ—Ç—ã
    if tips_start is not None:
        end = kbju_start or len(lines)
        block_lines = lines[tips_start+1:end]
        block_lines = [clean_line(l, 'üí°', '–°–æ–≤–µ—Ç—ã –æ—Ç —à–µ—Ñ–∞') for l in block_lines if l]
        tips = [re.sub(r'^[-‚Äì\d.\s]*', '', t) for t in block_lines]
        blocks['tips'] = '\n'.join(f'‚Äì {t}' for t in tips if t)
    # –ö–ë–ñ–£
    if kbju_start is not None:
        end = len(lines)
        kbju_lines = lines[kbju_start:end]
        kbju_text = '\n'.join(kbju_lines)
        kbju_text = re.sub(r'(?i)–∫–±–∂—É[:\s-]*', '', kbju_text)
        kbju_text = re.sub(r'\n+', '\n', kbju_text)
        blocks['kbju'] = kbju_text.strip()

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ë–ñ–£ –ø–æ —à–∞–±–ª–æ–Ω—É
    def format_kbju_block(kbju_raw):
        kbju_100g = {'cal': '', 'prot': '', 'fat': '', 'carb': ''}
        kbju_portion = {'cal': '', 'prot': '', 'fat': '', 'carb': ''}
        m_100g = re.search(r'([–ù–Ω]–∞ 100 ?–≥[^\n]*)', kbju_raw)
        if m_100g:
            s = m_100g.group(1)
            kbju_100g['cal'] = re.search(r'(\d+\s*–∫–∫–∞–ª)', s) and re.search(r'(\d+\s*–∫–∫–∞–ª)', s).group(1) or ''
            kbju_100g['prot'] = re.search(r'(\d+\s*–≥\s*–±–µ–ª–∫)', s) and re.search(r'(\d+\s*–≥\s*–±–µ–ª–∫)', s).group(1) or ''
            kbju_100g['fat'] = re.search(r'(\d+\s*–≥\s*–∂–∏—Ä)', s) and re.search(r'(\d+\s*–≥\s*–∂–∏—Ä)', s).group(1) or ''
            kbju_100g['carb'] = re.search(r'(\d+\s*–≥\s*—É–≥–ª–µ–≤–æ–¥)', s) and re.search(r'(\d+\s*–≥\s*—É–≥–ª–µ–≤–æ–¥)', s).group(1) or ''
        m_portion = re.search(r'([–ù–Ω]–∞ [1-9][0-9]* ?–ø–æ—Ä—Ü[^\n]*)', kbju_raw)
        if m_portion:
            s = m_portion.group(1)
            kbju_portion['cal'] = re.search(r'(\d+\s*–∫–∫–∞–ª)', s) and re.search(r'(\d+\s*–∫–∫–∞–ª)', s).group(1) or ''
            kbju_portion['prot'] = re.search(r'(\d+\s*–≥\s*–±–µ–ª–∫)', s) and re.search(r'(\d+\s*–≥\s*–±–µ–ª–∫)', s).group(1) or ''
            kbju_portion['fat'] = re.search(r'(\d+\s*–≥\s*–∂–∏—Ä)', s) and re.search(r'(\d+\s*–≥\s*–∂–∏—Ä)', s).group(1) or ''
            kbju_portion['carb'] = re.search(r'(\d+\s*–≥\s*—É–≥–ª–µ–≤–æ–¥)', s) and re.search(r'(\d+\s*–≥\s*—É–≥–ª–µ–≤–æ–¥)', s).group(1) or ''
        if not any(kbju_100g.values()) and not any(kbju_portion.values()):
            return '~250 –∫–∫–∞–ª, ~12 –≥ –±–µ–ª–∫–æ–≤, ~8 –≥ –∂–∏—Ä–æ–≤, ~20 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤'
        result = '–ù–∞ 100 –≥:'
        if any(kbju_100g.values()):
            if kbju_100g['cal']:
                result += f'\n - {kbju_100g["cal"]}'
            if kbju_100g['prot']:
                result += f'\n - {kbju_100g["prot"]}'
            if kbju_100g['fat']:
                result += f'\n - {kbju_100g["fat"]}'
            if kbju_100g['carb']:
                result += f'\n - {kbju_100g["carb"]}'
        else:
            result += '\n~250 –∫–∫–∞–ª, ~12 –≥ –±–µ–ª–∫–æ–≤, ~8 –≥ –∂–∏—Ä–æ–≤, ~20 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤'
        result += '\n–ù–∞ –ø–æ—Ä—Ü–∏—é (300 –≥):'
        if any(kbju_portion.values()):
            if kbju_portion['cal']:
                result += f'\n - {kbju_portion["cal"]}'
            if kbju_portion['prot']:
                result += f'\n - {kbju_portion["prot"]}'
            if kbju_portion['fat']:
                result += f'\n - {kbju_portion["fat"]}'
            if kbju_portion['carb']:
                result += f'\n - {kbju_portion["carb"]}'
        else:
            result += '\n~750 –∫–∫–∞–ª, ~36 –≥ –±–µ–ª–∫–æ–≤, ~24 –≥ –∂–∏—Ä–æ–≤, ~60 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤'
        return result

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
    result = ''
    result += f'üìå {blocks["title"]}\n\n' if blocks['title'] else ''
    result += f'‚ö°Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {blocks["difficulty"]}\n\n'
    result += f'üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n{blocks["ingredients"]}\n\n'
    result += f'üî™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:\n{blocks["prep"]}\n\n'
    result += f'ü•£ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:\n{blocks["steps"]}\n\n'
    result += f'üí° –°–æ–≤–µ—Ç—ã –æ—Ç —à–µ—Ñ–∞:\n{blocks["tips"]}\n\n'
    result += f'üçΩ –ö–ë–ñ–£ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ):\n{format_kbju_block(blocks["kbju"])}\n\n'
    result += 'üë®‚Äçüç≥ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –æ—Ç –≤–∞—à–µ–≥–æ —à–µ—Ñ–∞!'
    result = re.sub(r'\n{3,}', '\n\n', result)
    return result.strip()

async def generate_recipe(
    ingredients: List[str],
    user_id: int,
    session: AsyncSession = None,
    temp_difficulty: Optional[str] = None,
    query: Optional[str] = None
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–æ —Å–ø–∏—Å–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ Gemini Vision API —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        prefs = None
        if user_id and session:
            prefs = await get_preferences(session, user_id)
        healthy_profile = getattr(prefs, 'healthy_profile', False) if prefs else False
        preferred_cuisine = getattr(prefs, 'preferred_cuisine', '–õ—é–±–∞—è') if prefs else '–õ—é–±–∞—è'

        if query:
            prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SnapChef.

–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \"{query}\".

–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ HTML –∏ markdown, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ emoji):

üìå –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)

‚ö°Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: –õ–µ–≥–∫–∏–π / –°—Ä–µ–¥–Ω–∏–π / –°–ª–æ–∂–Ω—ã–π

üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Äì –ø—Ä–æ–¥—É–∫—Ç 1
‚Äì –ø—Ä–æ–¥—É–∫—Ç 2
...

üî™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:
‚Äì —à–∞–≥ 1
‚Äì —à–∞–≥ 2
...

ü•£ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:
1. —à–∞–≥ 1
2. —à–∞–≥ 2
...

üí° –°–æ–≤–µ—Ç—ã –æ—Ç —à–µ—Ñ–∞:
‚Äì —Å–æ–≤–µ—Ç 1
‚Äì —Å–æ–≤–µ—Ç 2

üçΩ –ö–ë–ñ–£ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ):
–ù–∞ 100 –≥: ... –∫–∫–∞–ª, ... –≥ –±–µ–ª–∫–æ–≤, ... –≥ –∂–∏—Ä–æ–≤, ... –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
–ù–∞ –ø–æ—Ä—Ü–∏—é (300 –≥): ... –∫–∫–∞–ª, ... –≥ –±–µ–ª–∫–æ–≤, ... –≥ –∂–∏—Ä–æ–≤, ... –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

üë®‚Äçüç≥ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –æ—Ç –≤–∞—à–µ–≥–æ —à–µ—Ñ–∞!

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML, markdown, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ emoji –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –Ω–µ –ø–∏—à–∏ "–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç" –∏ —Ç.–ø.
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–õ–µ–≥–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –°–ª–æ–∂–Ω—ã–π) –ø–æ—Å–ª–µ ‚ö°Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å:.
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –ö–ë–ñ–£ (–¥–∞–∂–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –Ω–µ—Ç).
- {('–ì–æ—Ç–æ–≤—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∂–∞—Ä–∫—É, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–π –∂–∏—Ä—ã, –¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∑–¥–æ—Ä–æ–≤—ã–º.' if healthy_profile else '')}
- {f'–û—Ñ–æ—Ä–º–∏ —Ä–µ—Ü–µ–ø—Ç –≤ —Å—Ç–∏–ª–µ {preferred_cuisine} –∫—É—Ö–Ω–∏.' if preferred_cuisine and preferred_cuisine != '–õ—é–±–∞—è' else ''}
"""
        else:
            prompt_extra = ''
            if healthy_profile:
                prompt_extra += (
                    '–†–µ–∂–∏–º –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≥–æ—Ç–æ–≤–∫–∏ –∏ –¥–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑—ã –±–ª—é–¥–∞ (–≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏).\n'
                )
            if preferred_cuisine and preferred_cuisine != '–õ—é–±–∞—è':
                prompt_extra += (
                    f'–ü—Ä–∏–≥–æ—Ç–æ–≤—å —ç—Ç–æ –±–ª—é–¥–æ –≤ —Å—Ç–∏–ª–µ {preferred_cuisine} –∫—É—Ö–Ω–∏.\n'
                )
            if temp_difficulty:
                if temp_difficulty.lower().startswith('–ø—Ä–æ—â–µ'):
                    prompt_extra += '–°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –ø—Ä–æ—Å—Ç—ã–º –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º. –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —à–∞–≥–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç—ã.\n'
                elif temp_difficulty.lower().startswith('—Å–ª–æ–∂–Ω–µ–µ'):
                    prompt_extra += '–°–¥–µ–ª–∞–π —Ä–µ—Ü–µ–ø—Ç –±–æ–ª–µ–µ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º. –î–æ–±–∞–≤—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–≥–∏ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–∞—á—É.\n'

            prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ SnapChef.

üîß –ó–ê–î–ê–ß–ê:
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ {ingredients} —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ—Ü–µ–ø—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏ –ø–æ–Ω—è—Ç–Ω–æ–º —Å—Ç–∏–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, –∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–π (—Å–æ–ª—å, –ø–µ—Ä–µ—Ü, –º–∞—Å–ª–æ –∏ —Ç.–ø.).

{prompt_extra}

–°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∫–∞–∂–¥—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ HTML –∏ markdown, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ emoji):

üìå –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)

‚ö°Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: –õ–µ–≥–∫–∏–π / –°—Ä–µ–¥–Ω–∏–π / –°–ª–æ–∂–Ω—ã–π

üìù –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
‚Äì –ø—Ä–æ–¥—É–∫—Ç 1
‚Äì –ø—Ä–æ–¥—É–∫—Ç 2
...

üî™ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:
‚Äì —à–∞–≥ 1
‚Äì —à–∞–≥ 2
...

ü•£ –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:
1. —à–∞–≥ 1
2. —à–∞–≥ 2
...

üí° –°–æ–≤–µ—Ç—ã –æ—Ç —à–µ—Ñ–∞:
‚Äì —Å–æ–≤–µ—Ç 1
‚Äì —Å–æ–≤–µ—Ç 2

üçΩ –ö–ë–ñ–£ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ):
–ù–∞ 100 –≥: ... –∫–∫–∞–ª, ... –≥ –±–µ–ª–∫–æ–≤, ... –≥ –∂–∏—Ä–æ–≤, ... –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤
–ù–∞ –ø–æ—Ä—Ü–∏—é (300 –≥): ... –∫–∫–∞–ª, ... –≥ –±–µ–ª–∫–æ–≤, ... –≥ –∂–∏—Ä–æ–≤, ... –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤

üë®‚Äçüç≥ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –æ—Ç –≤–∞—à–µ–≥–æ —à–µ—Ñ–∞!

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π HTML, markdown, —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ emoji –≤ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞.
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑, –Ω–µ –ø–∏—à–∏ "–í–æ—Ç —Ä–µ—Ü–µ–ø—Ç" –∏ —Ç.–ø.
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–õ–µ–≥–∫–∏–π, –°—Ä–µ–¥–Ω–∏–π, –°–ª–æ–∂–Ω—ã–π) –ø–æ—Å–ª–µ ‚ö°Ô∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å:.
- –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –ö–ë–ñ–£ (–¥–∞–∂–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç–æ—á–Ω—ã—Ö –Ω–µ—Ç).
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}
"""
        logger.info(f"[Prompt]: {prompt}")
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = await model.generate_content_async(prompt)
        logger.info(f"[Response]: {response.text}")
        logger.info(f"Recipe generated: {response.text}")
        return format_recipe(response.text)
    except Exception as e:
        logger.error(f"Recipe generation error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- UNIT TEST ---
import pytest
import types
class DummyPrefs:
    difficulty = '–°–ª–æ–∂–Ω—ã–µ'
    calories_enabled = True
    healthy_mode = True
@pytest.mark.asyncio
def test_prompt_extra_in_generate_recipe(monkeypatch):
    async def dummy_get_preferences(session, user_id):
        return DummyPrefs()
    monkeypatch.setattr('user_preferences_service.get_preferences', dummy_get_preferences)
    captured = {}
    async def dummy_generate_content_async(self, prompt):
        captured['prompt'] = prompt
        assert '–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏' in prompt
        assert '–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π' in prompt
        assert '–†–µ–∂–∏–º –ó–û–ñ - –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' in prompt
        return types.SimpleNamespace(text='ok')
    monkeypatch.setattr('google.generativeai.GenerativeModel.generate_content_async', dummy_generate_content_async)
    import asyncio
    asyncio.run(generate_recipe(['—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω'], user_id=1, session=object()))
    assert '–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏' in captured['prompt']
    assert '–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π' in captured['prompt']
    assert '–†–µ–∂–∏–º –ó–û–ñ - –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' in captured['prompt'] 