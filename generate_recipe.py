RECIPE_GENERATION_PROMPT = (
    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ( —à–µ—Ñ-–ø–æ–≤–∞—Ä )SnapChef. –°–æ—Å—Ç–∞–≤–ª—è–π —Ä–µ—Ü–µ–ø—Ç—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º, –ø–æ–Ω—è—Ç–Ω–æ–º –∏ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ.\n\n"
    "–û—Ñ–æ—Ä–º–ª—è–π –∫–∞–∂–¥—ã–π —Ä–µ—Ü–µ–ø—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\n\n"
    "1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ ‚Äî –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.\n"
    "2. –°–ª–æ–∂–Ω–æ—Å—Ç—å ‚Äî –æ—Ü–µ–Ω–∏ —Ä–µ—Ü–µ–ø—Ç –∫–∞–∫ '–õ–µ–≥–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π' –∏–ª–∏ '–°–ª–æ–∂–Ω—ã–π'.\n\n"
    "3. –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    "   - –ø—Ä–æ–¥—É–∫—Ç 1\n"
    "   - –ø—Ä–æ–¥—É–∫—Ç 2\n"
    "   –∏ —Ç.–¥. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏—Ä–µ (‚Äì), –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ä—ã (*, ‚Ä¢ –∏ —Ç.–ø.).\n\n"
    "4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ ‚Äî –æ–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ –Ω–∞—á–∞–ª–∞ –≥–æ—Ç–æ–≤–∫–∏ (–ø–æ–º—ã—Ç—å, –ø–æ—á–∏—Å—Ç–∏—Ç—å, –Ω–∞—Ä–µ–∑–∞—Ç—å –∏ —Ç.–¥.). –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.\n\n"
    "5. –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è. –ö–∞–∂–¥—ã–π —à–∞–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π.\n"
    "6. –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî 1‚Äì3 –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –≤–∫—É—Å–∞, –∑–∞–º–µ–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –ø–æ–¥–∞—á–µ –±–ª—é–¥–∞ –∏ —Ç.–¥.\n\n"
    "–°—Ç–∏–ª—å —Ä–µ—á–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ —É–≤–µ—Ä–µ–Ω–Ω—ã–π. –ü–∏—à–∏, –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä—è—Å–Ω—è–µ—Ç –≤—Å—ë —Å –∑–∞–±–æ—Ç–æ–π, –Ω–æ –±–µ–∑ —Å—é—Å—é–∫–∞–Ω—å—è.\n"
    "–°–º–∞–π–ª–∏–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ –º–µ—Ä—É –∏ –ø–æ –¥–µ–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, üçã, üç≥, üçΩÔ∏è). –ù–µ –±–æ–ª–µ–µ 2‚Äì3 –≤ —Ç–µ–∫—Å—Ç–µ, —Å—Ç–∞–≤—å –∏—Ö —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω–æ.\n\n"
    "–°–¢–†–û–ì–û –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (*, **, __, -, ‚Ä¢, # –∏ –ø—Ä–æ—á–µ–µ).\n"
    "–ù–µ –ø–∏—à–∏ –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ù–µ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Ä–µ—Ü–µ–ø—Ç–∞."
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingredients}, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, –∫—Ä–æ–º–µ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–ø–µ—Ü–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ, –Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–π –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"
)

import os


import logging
import google.generativeai as genai
from dotenv import load_dotenv
import re
from user_preferences_service import get_preferences

load_dotenv()

GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
genai.configure(api_key=GEMINI_API_KEY)

logger = logging.getLogger(__name__)

def format_recipe(text: str) -> str:
    # –£–±–∏—Ä–∞–µ–º *, **, ‚Ä¢, ‚Äî, –¥–µ–ª–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
    text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)  # —É–±–∏—Ä–∞–µ–º **
    text = text.replace('**', '').replace('*', '')
    text = text.replace('‚Ä¢', '-').replace('‚Äî', '-')
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    text = re.sub(r'(?i)—Ä–µ—Ü–µ–ø—Ç:', 'üçΩÔ∏è <b>–†–µ—Ü–µ–ø—Ç:</b>', text)
    text = re.sub(r'(?i)–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:', 'üìù <b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b>', text)
    text = re.sub(r'(?i)–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:|—à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:|—à–∞–≥–∏:', 'ü•£ <b>–®–∞–≥–∏:</b>', text)
    text = re.sub(r'(?i)—Å–æ–≤–µ—Ç[—ã]?:', 'üí° <i>–°–æ–≤–µ—Ç—ã –æ—Ç —à–µ—Ñ–∞:</i>', text)
    # –°–ø–∏—Å–∫–∏
    text = re.sub(r'\n\s*[-‚Äì‚Äî]\s*', '\n- ', text)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
    text = re.sub(r'\n\s*\d+\.', lambda m: f"\nüî∏ {m.group(0).strip()}", text)  # —à–∞–≥–∏
    text = re.sub(r'\n- ', '\n‚ñ´Ô∏è ', text)  # —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = re.sub(r'\n{3,}', '\n\n', text)
    # –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    if '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞' not in text:
        text += '\n\nüë®‚Äçüç≥ <i>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞ –æ—Ç –≤–∞—à–µ–≥–æ —à–µ—Ñ–∞!</i>'
    return text.strip()

async def generate_recipe(ingredients: list, user_id: int = None, session=None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç –ø–æ —Å–ø–∏—Å–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini Vision API —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        prompt_extra = ''
        if user_id and session:
            prefs = await get_preferences(session, user_id)
            difficulty_map = {
                '–ü—Ä–æ—Å—Ç—ã–µ': '–õ—ë–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏, –º–∏–Ω–∏–º—É–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏—ë–º–æ–≤, –±–µ–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—É—à–µ–Ω–∏—è –∏ –≤—ã–ø–µ—á–∫–∏.',
                '–°—Ä–µ–¥–Ω–∏–µ': '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: –≤–∫–ª—é—á–∞–µ—Ç —É–º–µ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (–∑–∞–ø–µ–∫–∞–Ω–∏–µ, —Ç—É—à–µ–Ω–∏–µ), –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è ~40‚Äì60 –º–∏–Ω.',
                '–°–ª–æ–∂–Ω—ã–µ': '–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ (–º–∞—Ä–∏–Ω–æ–≤–∞–Ω–∏–µ, –≥—Ä–∏–ª—å, –ø–æ—ç—Ç–∞–ø–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞), –≤—Ä–µ–º—è >60 –º–∏–Ω.'
            }
            difficulty_desc = difficulty_map.get(prefs.difficulty, '')
            calories_desc = (
                '–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π: —É–∫–∞–∂–∏ –æ–±—â–∏–π –∫–∞–ª–æ—Ä–∞–∂ –∏ –∫–∫–∞–ª –Ω–∞ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é (150‚ÄØ–≥).' if prefs.calories_enabled
                else '–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏.'
            )
            healthy_desc = (
                '–†–µ–∂–∏–º –ó–û–ñ - –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å–ª–∞, –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π, –º–µ–Ω—å—à–µ —Å–æ–ª–∏ –∏ —Å–∞—Ö–∞—Ä–∞.' if prefs.healthy_mode
                else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é.'
            )
            prompt_extra = (
                '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
                f'- –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {difficulty_desc}\n'
                f'- –ö–∞–ª–æ—Ä–∏–∏: {calories_desc}\n'
                f'- –ó–û–ñ‚Äë—Ä–µ–∂–∏–º: {healthy_desc}\n'
            )
        full_prompt = (
            prompt_extra + "\n"
            + RECIPE_GENERATION_PROMPT + "\n"
            + "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
            + "\n".join(f"‚Äì {i}" for i in ingredients)
        )
        logger.info(f"[Prompt]: {full_prompt}")
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = await model.generate_content_async(full_prompt)
        logger.info(f"[Response]: {response.text}")
        logger.info(f"Recipe generated: {response.text}")
        return format_recipe(response.text)
    except Exception as e:
        logger.error(f"Recipe generation error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# --- UNIT TEST ---
import pytest
import types
class DummyPrefs:
    difficulty = '–°–ª–æ–∂–Ω—ã–µ'
    calories_enabled = True
    healthy_mode = True
@pytest.mark.asyncio
def test_prompt_extra_in_generate_recipe(monkeypatch):
    async def dummy_get_preferences(session, user_id):
        return DummyPrefs()
    monkeypatch.setattr('user_preferences_service.get_preferences', dummy_get_preferences)
    captured = {}
    async def dummy_generate_content_async(self, prompt):
        captured['prompt'] = prompt
        assert '–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏' in prompt
        assert '–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π' in prompt
        assert '–†–µ–∂–∏–º –ó–û–ñ - –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' in prompt
        return types.SimpleNamespace(text='ok')
    monkeypatch.setattr('google.generativeai.GenerativeModel.generate_content_async', dummy_generate_content_async)
    import asyncio
    asyncio.run(generate_recipe(['—è–±–ª–æ–∫–æ', '–±–∞–Ω–∞–Ω'], user_id=1, session=object()))
    assert '–°–ª–æ–∂–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏' in captured['prompt']
    assert '–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π' in captured['prompt']
    assert '–†–µ–∂–∏–º –ó–û–ñ - –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' in captured['prompt'] 